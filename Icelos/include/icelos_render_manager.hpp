////////////////////////////////////////////////////////////////////////////////
/// @file    icelos_render_manager.hpp
/// @brief   Provides RenderManager class.
/// @date    2014-05-28
/// @version 0.1 (alpha)
/// @author  Chengwu Huang <chengwhuang@gmail.com>
////////////////////////////////////////////////////////////////////////////////

#ifndef ICELOS_RENDER_MANAGER_HPP
#define ICELOS_RENDER_MANAGER_HPP

// icelos includes
#include <icelos_manager.hpp>

namespace icelos
{

class Graphics;
class ResourceManager;

////////////////////////////////////////////////////////////////////////////////
/// @class   RenderManager
/// @brief   Managing window and Renderer.
////////////////////////////////////////////////////////////////////////////////
class RenderManager:
  public Manager<RenderManager>
{
public:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Update the RenderManager.
  /// @details
  ///   This method is automatically called by the Engine class.
  //////////////////////////////////////////////////////////////////////////////
  void update();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Get current frame rate.
  /// @return
  ///   Current frame rate.
  //////////////////////////////////////////////////////////////////////////////
  uint32_t get_frame_rate() const;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Set the frame rate limite.
  /// @param[in] fps
  ///   Frame rate.
  /// @details
  ///   The frame rate for rendering may be slightly different from
  ///   the parameter.
  //////////////////////////////////////////////////////////////////////////////
  void set_frame_rate(uint32_t fps);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Add a graphics element for rendering.
  /// @param[in] graphics
  ///   Graphics element to render.
  //////////////////////////////////////////////////////////////////////////////
  void add_graphics(Graphics* graphics);

protected:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Initialization.
  //////////////////////////////////////////////////////////////////////////////
  void initialize();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Cleaning.
  //////////////////////////////////////////////////////////////////////////////
  void cleanup();

private:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Private default constructor.
  /// @note
  ///   This class is not allowed to be instanciated.
  //////////////////////////////////////////////////////////////////////////////
  RenderManager();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Private destructor.
  //////////////////////////////////////////////////////////////////////////////
  ~RenderManager();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Private copy constructor.
  /// @note
  ///   This class is not allowed to be copied.
  //////////////////////////////////////////////////////////////////////////////
  RenderManager(const RenderManager&);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Private assignment operator.
  /// @note
  ///   This class is not allowed to be copied.
  //////////////////////////////////////////////////////////////////////////////
  RenderManager& operator=(const RenderManager&);

private:
  friend class Manager<RenderManager>;
  friend class ResourceManager;
private:
  typedef std::vector<Graphics*>           graphics_vector_t;
  typedef std::vector<Graphics*>::iterator graphics_iter_t;
private:
  SDL_Window*       p_sdl_window;
  SDL_Renderer*     p_sdl_renderer;
  graphics_vector_t m_graphics;
  uint32_t          m_current_time;
  uint32_t          m_last_time;
  uint32_t          m_frame_rate;
}; // class icelos

} // namespace icelos

#endif // ICELOS_RENDER_MANAGER_HPP

