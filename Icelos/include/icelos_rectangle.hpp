////////////////////////////////////////////////////////////////////////////////
/// @file    icelos_vector.hpp
/// @brief   Provides template Rectangle class.
/// @date    2014-05-17
/// @version 0.1 (alpha)
/// @author  Chengwu Huang <chengwhuang@gmail.com>
////////////////////////////////////////////////////////////////////////////////

#ifndef ICELOS_RECTANGLE_HPP
#define ICELOS_RECTANGLE_HPP

#include <SDL2/SDL_rect.h>

#include <icelos_vector.hpp>

namespace icelos {

template <typename T>
class Rectangle
{
public:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Public default constructor.
  //////////////////////////////////////////////////////////////////////////////
  Rectangle();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Public override constructor.
  /// @param[in] x
  ///   Coordinate x (top-left point of the rectangle).
  /// @param[in] y
  ///   Coordinate y (top-left point of the rectangle).
  /// @param[in] w
  ///   Width of the rectangle.
  /// @param[in] h
  ///   Height of the rectangle.
  //////////////////////////////////////////////////////////////////////////////
  Rectangle(T x, T y, T w, T h);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Public override constructor.
  /// @param[in] position
  ///   Position of the rectangle (coordinates of the top-left point).
  /// @param[in] size
  ///   Size of the rectangle.
  //////////////////////////////////////////////////////////////////////////////
  Rectangle(const Vector<T>& position, const Vector<T>& size);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Public copy constructor.
  /// @param[in] rectangle
  ///   Rectangle to be copied.
  //////////////////////////////////////////////////////////////////////////////
  Rectangle(const Rectangle<T>& rectangle);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Public destructor.
  //////////////////////////////////////////////////////////////////////////////
  ~Rectangle();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Public assignment operator.
  /// @param[in] rectangle
  ///   Rectangle to be copied.
  /// @return
  ///   Copied rectangle.
  //////////////////////////////////////////////////////////////////////////////
  Rectangle<T>& operator=(const Rectangle<T>& rectangle);

public:
  T x;
  T y;
  T w;
  T h;
}; // class Rectangle

typedef Rectangle<int32_t> rectangle_t;

} // namespace icelos

#include <icelos_rectangle.inl>

#endif

