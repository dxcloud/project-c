//////////////////////////////////////////////////////////////////////////////
//! \file
//!     sac2_logger.cpp
//! \author
//!     Chengwu HUANG
//! \version
//!     1.0
//! \date
//!     2013-05-12
//! \date
//!     2013-08-16
//////////////////////////////////////////////////////////////////////////////

#include <sac2_logger.hpp>

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
// Logger::m_logger
//////////////////////////////////////////////////////////////////////////////
Logger Logger::m_logger;

//////////////////////////////////////////////////////////////////////////////
// Logger::m_level_msg
//////////////////////////////////////////////////////////////////////////////
const string_t Logger::m_level_msg[]=
{
  "[DEBUG]  : ",
  "[CONFIG] : ",
  "[INFO]   : ",
  "[WARNING]: ",
  "[ERROR]  : "
};

//////////////////////////////////////////////////////////////////////////////
// Logger::Logger
//////////////////////////////////////////////////////////////////////////////
Logger::Logger():
  m_active(false),
  m_log_level(DEBUG),
  m_stream()
{
  // do nothing
}

//////////////////////////////////////////////////////////////////////////////
// Logger::~Logger
//////////////////////////////////////////////////////////////////////////////
Logger::~Logger()
{
  // do nothing
}

//////////////////////////////////////////////////////////////////////////////
// Logger::create
//////////////////////////////////////////////////////////////////////////////
void Logger::create(const string_t& filename)
{
  if (false == m_logger.m_active) {
    m_logger.m_active = true;
    m_logger.m_stream.open(filename.c_str());
    log_info("Log filename: " + filename);
  }  // open file stream
}

//////////////////////////////////////////////////////////////////////////////
// Logger::destroy
//////////////////////////////////////////////////////////////////////////////
void Logger::destroy()
{
  if (true == m_logger.m_active) {
    m_logger.m_active = false;
    if (true == m_logger.m_stream.is_open()) {
      m_logger.m_stream << "Log File closed" << std::endl;
      m_logger.m_stream.close();
    }  // close file stream
  }
}

//////////////////////////////////////////////////////////////////////////////
// Logger::set_log_level
//////////////////////////////////////////////////////////////////////////////
void Logger::set_log_level(log_level_t level)
{
  m_logger.m_log_level = level;
}

//////////////////////////////////////////////////////////////////////////////
// Logger::log
//////////////////////////////////////////////////////////////////////////////
void Logger::log(const log_level_t level, const string_t& message)
{
  if (level < m_logger.m_log_level) { return; }
  if (true == m_logger.m_active) {
    m_logger.m_stream << m_level_msg[level] << message << std::endl;
  }
  else {
    std::cout << m_level_msg[level] << message << std::endl;
  }
}

//////////////////////////////////////////////////////////////////////////////
// Logger::log_debug
//////////////////////////////////////////////////////////////////////////////
void Logger::log_debug(const string_t& message)
{
  log(DEBUG, message);
}

//////////////////////////////////////////////////////////////////////////////
// Logger::log_config
//////////////////////////////////////////////////////////////////////////////
void Logger::log_config(const string_t& message)
{
  log(CONFIG, message);
}

//////////////////////////////////////////////////////////////////////////////
// Logger::log_info
//////////////////////////////////////////////////////////////////////////////
void Logger::log_info(const string_t& message)
{
  log(INFO, message);
}

//////////////////////////////////////////////////////////////////////////////
// Logger::log_warning
//////////////////////////////////////////////////////////////////////////////
void Logger::log_warning(const string_t& message)
{
  log(WARNING, message);
}

//////////////////////////////////////////////////////////////////////////////
// Logger::log_error
//////////////////////////////////////////////////////////////////////////////
void Logger::log_error(const string_t& message)
{
  log(ERROR, message);
}

}  // namespace sac2
