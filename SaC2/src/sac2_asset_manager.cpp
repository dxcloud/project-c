//////////////////////////////////////////////////////////////////////////////
//! \file sac2_asset_manager.cpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (alpha)
//! \date
//!     2013-04-08
//////////////////////////////////////////////////////////////////////////////

#include <sac2_asset_manager.hpp>
#include <sac2_sprite_asset.hpp>

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
// AssetManager::AssetManager
//////////////////////////////////////////////////////////////////////////////
AssetManager::AssetManager():
  Manager<AssetManager>(),
  m_font_map(),
  m_music_map(),
  m_buffer_map(),
  m_texture_map()
{
  LOG_DEBUG("AssetManager::ctor - successfully initialized")
}

//////////////////////////////////////////////////////////////////////////////
// AssetManager::~AssetManager
//////////////////////////////////////////////////////////////////////////////
AssetManager::~AssetManager()
{
  LOG_DEBUG("AssetManager::dtor - succesfully destroyed")
}

//////////////////////////////////////////////////////////////////////////////
// AssetManager::load_texture
//////////////////////////////////////////////////////////////////////////////
status_t AssetManager::load_texture(asset_id_t id)
{
  return load_asset<texture_map_t, sf::Texture>(id, m_texture_map);
}

//////////////////////////////////////////////////////////////////////////////
// AssetManager::unload_texture
//////////////////////////////////////////////////////////////////////////////
status_t AssetManager::unload_texture(asset_id_t id)
{
  return unload_asset<texture_map_t>(id, m_texture_map);
}

//////////////////////////////////////////////////////////////////////////////
// AssetManager::use_texture
//////////////////////////////////////////////////////////////////////////////
status_t AssetManager::use_texture(asset_id_t id, SpriteAsset& sprite)
{
  return use_asset<texture_map_t,
                   sf::Texture,
                   SpriteAsset>(id, sprite, m_texture_map);
}

//////////////////////////////////////////////////////////////////////////////
// AssetManager::load_sound
//////////////////////////////////////////////////////////////////////////////
status_t AssetManager::load_sound(asset_id_t id)
{
  return load_asset<buffer_map_t, sf::SoundBuffer>(id, m_buffer_map);
}

//////////////////////////////////////////////////////////////////////////////
// AssetManager::unload_sound
//////////////////////////////////////////////////////////////////////////////
status_t AssetManager::unload_sound(asset_id_t id)
{
  return unload_asset<buffer_map_t>(id, m_buffer_map);
}

//////////////////////////////////////////////////////////////////////////////
// AssetManager::load_music
//////////////////////////////////////////////////////////////////////////////
status_t AssetManager::load_music(asset_id_t id)
{
  if (m_music_map.end() != m_music_map.find(id)) { return STATUS_ALREADY; }
  if (m_asset_table.end() == m_asset_table.find(id)) { return STATUS_MISS; }
  sf::Music* music(new sf::Music);
  if (false == music->openFromFile(m_asset_table.at(id))) {
    delete music;
    return STATUS_FAIL;
  }  // error from SFML
  m_music_map.insert(std::make_pair(id, music));
  return STATUS_SUCCESS;
}

//////////////////////////////////////////////////////////////////////////////
// AssetManager::unload_music
//////////////////////////////////////////////////////////////////////////////
status_t AssetManager::unload_music(asset_id_t id)
{
  return unload_asset<music_map_t>(id, m_music_map);
}

//////////////////////////////////////////////////////////////////////////////
// AssetManager::cleanup
//////////////////////////////////////////////////////////////////////////////
void AssetManager::cleanup()
{
  remove_asset<music_map_t>(m_music_map);
  remove_asset<texture_map_t>(m_texture_map);
  remove_asset<buffer_map_t>(m_buffer_map);
  LOG_DEBUG("AssetManager::cleanup - all assets removed")
}

}  // namespace sac2

