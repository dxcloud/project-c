//////////////////////////////////////////////////////////////////////////////
//! \file sac2_audio_manager.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (development version)
//! \date
//!     2013-07-03
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_AUDIO_MANAGER_HPP
#define SAC2_AUDIO_MANAGER_HPP

#include <SFML/Audio.hpp>

#include <sac2_manager.hpp>

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//! \class AudioManager
//! \brief
//////////////////////////////////////////////////////////////////////////////
class AudioManager:
  public Manager<AudioManager>
{
public:
  ////////////////////////////////////////////////////////////////////////////
  //! \typedef sound_map_t
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  typedef std::map<asset_id_t, sf::Sound*> sound_map_t;

  ////////////////////////////////////////////////////////////////////////////
  //! \typedef sound_iter_t
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  typedef sound_map_t::iterator sound_iter_t;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  friend class Manager<AudioManager>;

public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Play the music specified by \b id.
  //! \param[in] id
  //!     Identifier of the music to be played.
  //! \return
  //!     Status code.
  //! \retval STATUS_SUCCESS
  //!     Successfully start the music for playing.
  //! \retval STATUS_CANCEL
  //!     Error occurred while playing the music.
  ////////////////////////////////////////////////////////////////////////////
  status_t play_music(asset_id_t id);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Pause the music specified by \b id.
  //! \param[in] id
  //!     Identifier of the music to pause.
  //! \return
  //!     Status code.
  //! \retval STATUS_SUCCESS
  //!     Successfully paused the music.
  //! \retval STATUS_CANCEL
  //!     Specified music resource is already paused.
  ////////////////////////////////////////////////////////////////////////////
  status_t pause_music(asset_id_t id);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Stop the music specified by \b id.
  //! \param[in] id
  //!     Identifier of the music to stop.
  //! \return
  //!     Status code.
  //! \retval STATUS_SUCCESS
  //!     Successfully stopped the music.
  //! \retval STATUS_CANCEL
  //!     Specified music resource is already stopped.
  ////////////////////////////////////////////////////////////////////////////
  status_t stop_music(asset_id_t id);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Play the sound specified by \b id.
  //! \param[in] id
  //!     Identifier of the sound to be played.
  //! \return
  //!     Status code.
  //! \retval STATUS_SUCCESS
  //!     Successfully start the sound for playing.
  //! \retval STATUS_CANCEL
  //!     Error occurred while playing the sound.
  ////////////////////////////////////////////////////////////////////////////
  status_t play_sound(asset_id_t id);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Pause the sound specified by \b id.
  //! \param[in] id
  //!     Identifier of the sound to pause.
  //! \return
  //!     Status code.
  //! \retval STATUS_SUCCESS
  //!     Successfully pause the sound.
  //! \retval STATUS_CANCEL
  //!     Specified sound resource is already paused.
  ////////////////////////////////////////////////////////////////////////////
  status_t pause_sound(asset_id_t id);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Stop the sound specified by \b id.
  //! \param[in] id
  //!     Identifier of the sound to stop.
  //! \return
  //!     Status code.
  //! \retval STATUS_SUCCESS
  //!     Successfully stopped the sound.
  //! \retval STATUS_CANCEL
  //!     Specified sound resource is already stopped.
  ////////////////////////////////////////////////////////////////////////////
  status_t stop_sound(asset_id_t id);

protected:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!
  ////////////////////////////////////////////////////////////////////////////
  void cleanup();

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  sound_map_t  m_sound_map;

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private default constructor.
  ////////////////////////////////////////////////////////////////////////////
  AudioManager();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private destructor.
  ////////////////////////////////////////////////////////////////////////////
  ~AudioManager();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private copy constructor
  ////////////////////////////////////////////////////////////////////////////
  AudioManager(const AudioManager&);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private assignment operator
  ////////////////////////////////////////////////////////////////////////////
  AudioManager& operator=(const AudioManager&);
};  // class AudioManager

}  // namespace sac2

#endif  //! SAC2_AUDIO_MANAGER_HPP
