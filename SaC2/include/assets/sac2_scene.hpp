//////////////////////////////////////////////////////////////////////////////
//! \file sac2_scene.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (development version)
//! \date
//!     2013-08-21
//! \brief
//!     Provides Scene class.
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_SCENE_HPP
#define SAC2_SCENE_HPP

#include <sac2_type.hpp>
#include <sac2_game_object.hpp>

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//! \brief
//!     
//////////////////////////////////////////////////////////////////////////////
typedef uint32_t scene_id_t;

//////////////////////////////////////////////////////////////////////////////
//! \class Scene
//! \brief
//!     A scene allows to order objects that displayed on the screen.
//////////////////////////////////////////////////////////////////////////////
class Scene
{
private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Compare two GameObject depends on the value of \b layer_t.
  ////////////////////////////////////////////////////////////////////////////
  struct compare_object
  {
    bool operator()(GameObject* obj_a, GameObject* obj_b)
    {
      return *obj_a < *obj_b;
    }
  };

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Compare two GameObject depends on the value of \b layer_t.
  ////////////////////////////////////////////////////////////////////////////
  typedef std::multiset<GameObject*, compare_object> object_set_t;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Compare two GameObject depends on the value of \b layer_t.
  ////////////////////////////////////////////////////////////////////////////
  typedef object_set_t::const_reverse_iterator object_const_riter_t;

public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Public default constructor
  ////////////////////////////////////////////////////////////////////////////
  Scene();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Public copy constructor
  ////////////////////////////////////////////////////////////////////////////
  Scene(const Scene& scene);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Assignment operator
  ////////////////////////////////////////////////////////////////////////////
  Scene& operator=(const Scene& scene);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Public destructor
  ////////////////////////////////////////////////////////////////////////////
  ~Scene();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Add a Game Object to the scene.
  ////////////////////////////////////////////////////////////////////////////
  void add_object(GameObject* object);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Update all game objects attached to the scene.
  ////////////////////////////////////////////////////////////////////////////
  void update(float dt);

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Collection of GameObject following the layer of the object.
  ////////////////////////////////////////////////////////////////////////////
  object_set_t m_object_set;

};  // class Scene

}

#endif //! SAC2_SCENE_HPP

