//////////////////////////////////////////////////////////////////////////////
//! \file
//!     sac2_graphic_asset.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (development version)
//! \date
//!     2013-04-08
//! \brief
//!     Provides interface for graphic elements manipulation.
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_GRAPHIC_ASSET_HPP
#define SAC2_GRAPHIC_ASSET_HPP

#include <sac2_asset.hpp>

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//! \class GraphicAsset
//! \brief
//!     Derived from class Asset, provides methods for any graphic
//!     manipulation.
//! \details
//!     This is also template class, and encapsulates graphic resource.
//!     Same for \b Asset, this class cannot be instanciated, or copied
//!     directly.
//! \see
//!     Asset, AssetManager
//////////////////////////////////////////////////////////////////////////////
template <class C>
class GraphicAsset:
  public Asset<C>
{
public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Get the current position of the object.
  //! \return
  //!     Coordinates of the current position.
  ////////////////////////////////////////////////////////////////////////////
  point_t get_position() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Get the current scale factor of the object.
  //! \return
  //!     Current scale factor.
  ////////////////////////////////////////////////////////////////////////////
  vector_t get_scale() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Get the current orientation of the object.
  //! \return
  //!     Current orientation of the object, in degrees.
  ////////////////////////////////////////////////////////////////////////////
  float get_orientation() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Set the position of the object.
  //! \param[in] x
  //!     New X coordinate.
  //! \param[in] y
  //!     New Y coordinate.
  ////////////////////////////////////////////////////////////////////////////
  void set_position(float x, float y);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Set the new position of the object.
  //! \param[in] position
  //!     New coordinates of the object.
  ////////////////////////////////////////////////////////////////////////////
  void set_position(const point_t& position);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Set the scale factor.
  //! \param[in] x
  //!     Horizontal scale factor.
  //! \param[in] y
  //!     Vertical scale factor.
  ////////////////////////////////////////////////////////////////////////////
  void set_scale(float x, float y);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Set the scale factor.
  //! \param[in] factor
  //!     New scale factor.
  ////////////////////////////////////////////////////////////////////////////
  void set_scale(const vector_t& factor);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Set the orientation of the object.
  //! \param[in] angdeg
  //!     Angle of the rotation, in degrees.
  ////////////////////////////////////////////////////////////////////////////
  void set_orientation(float angdeg);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Move the object by a given offset.
  //! \param[in] x
  //!     X offset.
  //! \param[in] y
  //!     Y offset.
  ////////////////////////////////////////////////////////////////////////////
  void move(float x, float y);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Move the object of a given offset.
  //! \param[in] offset
  //!     Offset vector.
  ////////////////////////////////////////////////////////////////////////////
  void move(const vector_t& offset);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Rotate the object by a given angle.
  //! \param[in] angdeg
  //!     Angle of rotation, in degrees.
  ////////////////////////////////////////////////////////////////////////////
  void rotate(float angdeg);

protected:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Protected default constructor
  ////////////////////////////////////////////////////////////////////////////
  GraphicAsset();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Protected default destructor
  ////////////////////////////////////////////////////////////////////////////
  virtual ~GraphicAsset();

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private copy constructor
  ////////////////////////////////////////////////////////////////////////////
  GraphicAsset(const GraphicAsset&);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private copy constructor
  ////////////////////////////////////////////////////////////////////////////
  GraphicAsset& operator=(const GraphicAsset&);
};  // class GraphicAsset

}  // namespace sac2

#include <sac2_graphic_asset.inl>

#endif  //! SAC2_GRAPHIC_ASSET_HPP
