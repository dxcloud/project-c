//////////////////////////////////////////////////////////////////////////////
//! \file sac2_animate_sprite.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (alpha)
//! \date
//!     2014-05-05
//! \brief
//!     Provides animated sprite class.
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_ANIMATE_SPRITE_HPP
#define SAC2_ANIMATE_SPRITE_HPP

#include <sac2_sprite_asset.hpp>
#include <sac2_animation_state.hpp>

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//! \class AnimateSprite
//! \brief
//!     This class is able to animate sprites.
//! \see
//!     Animation, AnimationState
//! \note
//!     This class is implemented with State Pattern.
//////////////////////////////////////////////////////////////////////////////
class AnimateSprite:
  public SpriteAsset
{
public:
  ////////////////////////////////////////////////////////////////////////////
  //! \typedef animation_state_map_t
  //! \brief
  //!     Map containing Animation State.
  ////////////////////////////////////////////////////////////////////////////
  typedef std::map<animation_state_t, AnimationState*> animation_state_map_t;

public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Allows to call constructor and destructor of private attribute.
  ////////////////////////////////////////////////////////////////////////////
  AnimateSprite();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Allows to call constructor and destructor of private attribute.
  ////////////////////////////////////////////////////////////////////////////
  virtual ~AnimateSprite();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Allows to call constructor and destructor of private attribute.
  ////////////////////////////////////////////////////////////////////////////
  void add_animation_state(animation_state_t id, AnimationState* state);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Allows to call constructor and destructor of private attribute.
  ////////////////////////////////////////////////////////////////////////////
  void update(animation_state_t state, float dt);

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Collection of animation states.
  ////////////////////////////////////////////////////////////////////////////
  animation_state_map_t m_animation_map;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Pointer of the current animation state.
  ////////////////////////////////////////////////////////////////////////////
  AnimationState* m_current;
}; // class AnimateSprite

} // namespace sac2

#endif // SAC2_ANIMATE_SPRITE_HPP

