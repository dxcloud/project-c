//////////////////////////////////////////////////////////////////////////////
//! \file sac2_game_object.cpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.2 (alpha)
//! \date
//!     2014-05-08
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_GAME_OBJECT_HPP
#define SAC2_GAME_OBJECT_HPP

#include <sac2_type.hpp>
#include <sac2_graphic_asset.hpp>
#include <sac2_asset_manager.hpp>

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//! \brief
//!     Game object properties.
//////////////////////////////////////////////////////////////////////////////
typedef uint32_t object_property_t;

//////////////////////////////////////////////////////////////////////////////
//! \brief
//!     ID of the game object.
//////////////////////////////////////////////////////////////////////////////
typedef uint32_t object_id_t;

//////////////////////////////////////////////////////////////////////////////
//! \brief
//!     Available layers.
//////////////////////////////////////////////////////////////////////////////
enum layer_t
{
  FOREGROUND   = 10,
  FOREGROUND_1 = 11,
  FOREGROUND_2 = 12,
  FOREGROUND_3 = 13,
  FOREGROUND_4 = 14,
  FOREGROUND_5 = 15,
  FOREGROUND_6 = 16,
  FOREGROUND_7 = 17,
  FOREGROUND_8 = 18,
  FOREGROUND_9 = 19,
  MIDGROUND    = 20,
  MIDGROUND_1  = 21,
  MIDGROUND_2  = 22,
  MIDGROUND_3  = 23,
  MIDGROUND_4  = 24,
  MIDGROUND_5  = 25,
  MIDGROUND_6  = 26,
  MIDGROUND_7  = 27,
  MIDGROUND_8  = 28,
  MIDGROUND_9  = 29,
  BACKGROUND   = 30,
  BACKGROUND_1 = 31,
  BACKGROUND_2 = 32,
  BACKGROUND_3 = 33,
  BACKGROUND_4 = 34,
  BACKGROUND_5 = 35,
  BACKGROUND_6 = 36,
  BACKGROUND_7 = 37,
  BACKGROUND_8 = 38,
  BACKGROUND_9 = 39
};

//////////////////////////////////////////////////////////////////////////////
//! \brief
//!     Available properties of an object.
//////////////////////////////////////////////////////////////////////////////
enum GAME_OBJECT_PROPERTY
{
  NO_PROPERTY = 0,
  RENDERING   = 1 << 0,
  COLLIDING   = 1 << 1,
  TRIGGERING  = 1 << 2
};

//////////////////////////////////////////////////////////////////////////////
//! \class
//!     GameObject
//! \brief
//!     Base class for all objects in scenes.
//! \details
//!     A game object can have several properties:
//!       - \b RENDERING: makes an object visible on the screen
//!       - \b COLLIDING: allows object collide with other collidable objects
//!       - \b TRIGGERING: trigger an action when conditions were met
//! \warning
//!     This class cannot be instanciated.
//! \see
//!     GAME_OBJECT_PROPERTY, Scene
//////////////////////////////////////////////////////////////////////////////
class GameObject
{
protected:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Protected default constructor.
  ////////////////////////////////////////////////////////////////////////////
  GameObject();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Protected override constructor.
  //! \param[in] layer
  //!     The layer where the object should set.
  ////////////////////////////////////////////////////////////////////////////
  explicit GameObject(layer_t layer);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Protected default destructor
  ////////////////////////////////////////////////////////////////////////////
  virtual ~GameObject();

public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Check whether the object is renderable.
  //! \return
  //!     Return \b true whether the object is renderable, \b false otherwise.
  ////////////////////////////////////////////////////////////////////////////
  bool is_renderable() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Check whether the object is triggerable.
  //! \return
  //!     Return \b true whether the object is triggerable, \b false otherwise.
  ////////////////////////////////////////////////////////////////////////////
  bool is_triggerable() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Check whether the object is collidable.
  //! \return
  //!     Return \b true whether the object is collidable, \b false otherwise.
  ////////////////////////////////////////////////////////////////////////////
  bool is_collidable() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Get the current layer of the object.
  //! \return
  //!     Current layer of the object.
  ////////////////////////////////////////////////////////////////////////////
  layer_t get_layer() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Comparison operator.
  //! \param[in] object
  //!     Object to be compared to.
  //! \details
  //!     This operator compares two objects in function of its layer.
  //! \return
  //!     Return \b true whether left operand has a lesser layer than
  //!     the right operand, \b false otherwise.
  ////////////////////////////////////////////////////////////////////////////
  bool operator<(const GameObject& object);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     This method is called whether the object has \a RENDERING property.
  //! \note
  //!     Should be override by derived class.
  ////////////////////////////////////////////////////////////////////////////
  virtual void rendering();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     This method is called whether the object has \a TRIGGERING property.
  //! \note
  //!     Should be override by derived class.
  ////////////////////////////////////////////////////////////////////////////
  virtual void triggering();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     This method is called whether the object has \a COLLIDING property.
  //! \note
  //!     Should be override by derived class.
  ////////////////////////////////////////////////////////////////////////////
  virtual void colliding();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Set the layer where the object should be.
  //! \param[in] layer
  //!     New layer of the object.
  //! \see
  //!     layer_t
  ////////////////////////////////////////////////////////////////////////////
  void set_layer(layer_t layer);

protected:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Enable/Disable the \b RENDERING property of the object.
  //! \param rendering
  //!     Set \b true to enable, \b false otherwise.
  ////////////////////////////////////////////////////////////////////////////
  void set_rendering(bool rendering);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Enable/Disable the \b TRIGGERING property of the object.
  //! \param triggering
  //!     Set \b true to enable, \b false otherwise.
  ////////////////////////////////////////////////////////////////////////////
  void set_triggering(bool triggering);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Enable/Disable the \b COLLIDING property of the object.
  //! \param colliding
  //!     Set \b true to enable, \b false otherwise.
  ////////////////////////////////////////////////////////////////////////////
  void set_colliding(bool colliding);

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Layer to be attached to the object.
  ////////////////////////////////////////////////////////////////////////////
  layer_t m_layer;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Object properties.
  //! \details
  //!     This value cannot be modifyed outside of the class.
  //! \see
  //!     GAME_OBJECT_PROPERTY, set_rendering, set_colliding, set_triggering
  ////////////////////////////////////////////////////////////////////////////
  object_property_t m_property;
}; // class GameObject


//////////////////////////////////////////////////////////////////////////////
//! \class RenderingObject
//! \brief
//!     Renderable object.
//////////////////////////////////////////////////////////////////////////////
template <typename T>
class RenderingObject:
  virtual public GameObject
{
public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Public default constructor
  ////////////////////////////////////////////////////////////////////////////
  RenderingObject(): GameObject() { set_rendering(true); }

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Public override constructor
  ////////////////////////////////////////////////////////////////////////////
  explicit RenderingObject(layer_t layer): GameObject(layer) {}

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Public destructor
  ////////////////////////////////////////////////////////////////////////////
  ~RenderingObject() {}

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Display the object.
  ////////////////////////////////////////////////////////////////////////////
  void rendering() {
    m_asset.draw();
  }
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Return the asset hold by the class. Allows to apply modifications
  //!     to the asset.
  ////////////////////////////////////////////////////////////////////////////
  T& asset() { return m_asset; }

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Drawable asset (e.g. \b SpriteAsset)
  ////////////////////////////////////////////////////////////////////////////
  T m_asset;
};

class SpriteAsset;
typedef RenderingObject<SpriteAsset> RenderingSprite;

} // namespace sac2

#include <sac2_game_object.inl>

#endif // SAC2_GAME_OBJECT_HPP

