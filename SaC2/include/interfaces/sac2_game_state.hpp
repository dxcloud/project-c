//////////////////////////////////////////////////////////////////////////////
//! \file
//!     sac2_game_state.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (development version)
//! \date
//!     2013-04-08
//! \brief
//!     Provides \c Game \c State interface.
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_GAME_STATE_HPP
#define SAC2_GAME_STATE_HPP

#include <sac2_type.hpp>
#include <sac2_logger.hpp>

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//! \class
//!     GameState
//! \brief
//!     Base interface for all Game State.
//! \details
//!     The following member functions must be defined by any derived class:
//!     - \b initializing()
//!     - \b pausing()
//!     - \b resuming()
//!     - \b updating(float dt)
//!     - \b cleaning()
//! \note
//!     The above methods are only called by \b StateManager.
//!     Do NOT call them directly.
//! \see
//!     StateManager
//////////////////////////////////////////////////////////////////////////////
class GameState
{
public:
  ////////////////////////////////////////////////////////////////////////////
  //! Access private attribute \b m_state_status.
  ////////////////////////////////////////////////////////////////////////////
  friend class StateManager;

public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Default constructor.
  ////////////////////////////////////////////////////////////////////////////
  GameState();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Default destructor.
  ////////////////////////////////////////////////////////////////////////////
  virtual ~GameState();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Test whether the State is initialized.
  //! \return
  //!     Return \b true if the State is uninitialized.
  ////////////////////////////////////////////////////////////////////////////
  bool is_uninitialized() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Test whether the State is paused.
  //! \return
  //!     Return \b true if the State is paused, \b false otherwise.
  ////////////////////////////////////////////////////////////////////////////
  bool is_paused() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Test whether the State is updating.
  //! \return
  //!     Return \b true if the State is updating, \b false otherwise.
  ////////////////////////////////////////////////////////////////////////////
  bool is_running() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Test whether the State is stopped.
  //! \return
  //!     Return \b true if the State is stopped, \b false otherwise.
  ////////////////////////////////////////////////////////////////////////////
  bool is_stopped() const;

protected:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Initialize the State.
  ////////////////////////////////////////////////////////////////////////////
  virtual void initializing() = 0;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Called when the State is paused.
  ////////////////////////////////////////////////////////////////////////////
  virtual void pausing() = 0;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Called when the State is resumed.
  ////////////////////////////////////////////////////////////////////////////
  virtual void resuming() = 0;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Called when the State is running.
  ////////////////////////////////////////////////////////////////////////////
  virtual void updating(float dt) = 0;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Called when the State is stopped.
  ////////////////////////////////////////////////////////////////////////////
  virtual void cleaning() = 0;

private:
  ////////////////////////////////////////////////////////////////////////////
  //! Indicates the current state status of the Game State:
  //! - \b UNINITIALIZED
  //! - \b INITIALIZED
  //! - \b RUNNING
  //! - \b PAUSED
  //! - \b STOPPED
  ////////////////////////////////////////////////////////////////////////////
  state_t m_state_status;
};  // class GameState

}

#include <sac2_game_state.inl>

#endif  //! SAC2_GAME_STATE_HPP

