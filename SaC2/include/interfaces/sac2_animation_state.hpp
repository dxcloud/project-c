//////////////////////////////////////////////////////////////////////////////
//! \file sac2_animation_state.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (alpha)
//! \date
//!     2014-05-05
//! \brief
//!     Provides 2D animation manipulation class.
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_ANIMATION_STATE_HPP
#define SAC2_ANIMATION_STATE_HPP

#include <sac2_animation.hpp>

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//! \class AnimationState
//! \brief
//! \see
//!     Animation, AnimationStateMachine
//////////////////////////////////////////////////////////////////////////////
class AnimationState
{
public:
  friend class AnimateSprite;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Public default constructor.
  ////////////////////////////////////////////////////////////////////////////
  AnimationState();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Public default destructor.
  ////////////////////////////////////////////////////////////////////////////
  virtual ~AnimationState();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Update the animation state.
  //! \return
  //!     Return the result of the method \a handle
  //! \see
  //!     handle
  ////////////////////////////////////////////////////////////////////////////
  animation_state_t update(animation_state_t state, float dt);

protected:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Return the animation hold by the class.
  //! \details
  //!     This method allows to modify the properties of the animation inside
  //!     of the method handle.
  //! \code
  //!     animation_state_t handle(animation_state_t state, float dt)
  //!     {
  //!       animation().set_repeat_enabled(true);  // loop the animation
  //!       animation().play();  // play the animation
  //!       return state;
  //!     }
  //! \endcode
  //! \see
  //!     Animation, handle
  ////////////////////////////////////////////////////////////////////////////
  Animation& animation();

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Handle the state.
  //! \param[in] state
  //!     Current animation state.
  //! \param[in] dt
  //!     Elapsed time.
  //! \return
  //!     Next animation state.
  ////////////////////////////////////////////////////////////////////////////
  virtual animation_state_t handle(animation_state_t state, float dt) = 0;

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Animation hold by the class.
  ////////////////////////////////////////////////////////////////////////////
  Animation m_animation;
};

}  // namspace sac2

// include inline methods
#include <sac2_animation_state.inl>

#endif  //! SAC2_ANIMATION_STATE_HPP

