//////////////////////////////////////////////////////////////////////////////
//! \file sac2_manager.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (develpment version)
//! \date
//!     2013-04-08
//! \brief
//!     Provies template for Management classes.
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_MANAGER_HPP
#define SAC2_MANAGER_HPP

#include <sac2_type.hpp>
#include <sac2_logger.hpp>

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//! \class Manager
//! \brief
//!     Template for Management classes
//! \note
//!     This class is implemented with \c Singleton \c Pattern
//////////////////////////////////////////////////////////////////////////////
template<class T>
class Manager
{
public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Get an instance of the class.
  //! \return
  //!     Unique reference of the manager.
  ////////////////////////////////////////////////////////////////////////////
  static T& instance();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Destroy the unique instance.
  ////////////////////////////////////////////////////////////////////////////
  static void destroy();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Update the manager.
  //! \param dt
  //!     Elapsed time since the last update.
  ////////////////////////////////////////////////////////////////////////////
  virtual void update(float dt);

protected:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Protected default constructor.
  ////////////////////////////////////////////////////////////////////////////
  Manager();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Protected default destructor.
  ////////////////////////////////////////////////////////////////////////////
  virtual ~Manager();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Initialize the manager.
  //! \details
  //!     Override this method in order to initialize member attributes of
  //!     derived class.
  ////////////////////////////////////////////////////////////////////////////
  virtual void initialize();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Cleanup before destroying the class.
  //! \details
  //!     Override this method whether derived class member attributes
  //!     need to be deleted.
  ////////////////////////////////////////////////////////////////////////////
  virtual void cleanup();

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Unique instance of the class.
  ////////////////////////////////////////////////////////////////////////////
  static T* p_manager;

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private copy constructor.
  ////////////////////////////////////////////////////////////////////////////
  Manager(const Manager&);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private assignment operator.
  ////////////////////////////////////////////////////////////////////////////
  Manager& operator=(const Manager&);
};  // class Manager

}  // namespace sac2

#include <sac2_manager.inl>

#endif  //! SAC2_MANAGER_HPP
