//////////////////////////////////////////////////////////////////////////////
//! \file sac2_camera.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (alpha)
//! \date
//!     2014-05-09
//! \brief
//!     Provides class for controlling 2D camera.
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_CAMERA_HPP
#define SAC2_CAMERA_HPP

#include <SFML/Graphics/View.hpp>

#include <sac2_type.hpp>
#include <sac2_rendering_manager.hpp>

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//! \class Camera
//! \brief
//!     2D camera manipulation class.
//! \note
//!     This class wraps sf::View.
//////////////////////////////////////////////////////////////////////////////
class Camera
{
public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Allows to use private member.
  ////////////////////////////////////////////////////////////////////////////
  friend class RenderingManager;

public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Public default constructor.
  ////////////////////////////////////////////////////////////////////////////
  Camera();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Public override construtor.
  //! \param[in] centre
  //!     Coordinates of the centre of the camera.
  //! \param[in] size
  //!     Size of the zone to diplay by the camera
  ////////////////////////////////////////////////////////////////////////////
  Camera(point_t centre, vector_t size);
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Public default destructor.
  ////////////////////////////////////////////////////////////////////////////
  virtual ~Camera();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Get the position of the camera.
  //! \return
  //!     Coordinates of the centre of the camera.
  ////////////////////////////////////////////////////////////////////////////
  point_t get_position() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Get the size of the diplayed zone.
  ////////////////////////////////////////////////////////////////////////////
  vector_t get_size() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Get the orientation of the camera.
  ////////////////////////////////////////////////////////////////////////////
  float get_orientation() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Set the position of the camera.
  //! \param[in] centre
  //!     Coordinates of the centre of the camera.
  ////////////////////////////////////////////////////////////////////////////
  void set_position(point_t centre);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Set the size of area to display.
  //! \param[in] size
  //!     Size of area to display.
  ////////////////////////////////////////////////////////////////////////////
  void set_size(vector_t size);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Set the orientation of the camera.
  //! \param[in] angdeg
  //!     Angle of orientation, in degrees.
  ////////////////////////////////////////////////////////////////////////////
  void set_orientation(float angdeg);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Move the camera relatively to its current position.
  //! \param[in] offset
  //!     Distance to move.
  ////////////////////////////////////////////////////////////////////////////
  void move(vector_t offset);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Resize the diplayed area.
  //! \param[in] factor
  //!     Zoom factor, depends on \b factor the area will
  //!       - Left unchanged, whether factor is egal to 1
  //!       - Zoom out, whether factor is greater than 1
  //!       - Zoom in, whether factor is lesser than 1
  ////////////////////////////////////////////////////////////////////////////
  void zoom(float factor);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Rotate the camera relatively to its current orientation.
  //! \param[in] angdeg
  //!     Angle of rotation, in degrees.
  ////////////////////////////////////////////////////////////////////////////
  void rotate(float angdeg);  

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     SFML class View.
  ////////////////////////////////////////////////////////////////////////////
  sf::View m_view;
};

}

#include <sac2_camera.inl>

#endif // SAC2_CAMERA_HPP

