//////////////////////////////////////////////////////////////////////////////
//! \file sac2_input_manager.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (alpha)
//! \date
//!     2013-05-29
//! \brief
//!     Provides \b InputManager to manage inputs from Keyboard.
//! \todo
//!     Handle Mouse, Joystic.
//! \todo
//!     Use \b std::vector<InputConfig*>.
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_INPUT_MANAGER_HPP
#define SAC2_INPUT_MANAGER_HPP

#include <sac2_manager.hpp>

//////////////////////////////////////////////////////////////////////////////
//! \def INPUT_MANAGER
//!     Shortcut, equivalent to \b sac2::InputManager::instance().
//////////////////////////////////////////////////////////////////////////////
#define INPUT_MANAGER sac2::InputManager::instance()

namespace sac2
{

// forward declaration
class InputConfig;

//////////////////////////////////////////////////////////////////////////////
//! \class InputManager
//! \brief
//!     This class handle inputs.
//////////////////////////////////////////////////////////////////////////////
class InputManager:
  public Manager<InputManager>
{
public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Allows to call constructor and destructor of private attribute.
  ////////////////////////////////////////////////////////////////////////////
  friend class Manager<InputManager>;

public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Change the current input configuration.
  //! \param[in] input_config
  //!     New input configuration.
  ////////////////////////////////////////////////////////////////////////////
  void set_input_config(InputConfig* input_config);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Update InputManager.
  //! \details
  //!     This method calls \b InputConfig::handle_inputs.
  //! \param[in] dt
  //!     Elapsed time.
  //! \see InputConfig::handle_inputs
  ////////////////////////////////////////////////////////////////////////////
  void update(float dt);

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Current input configuration.
  ////////////////////////////////////////////////////////////////////////////
  InputConfig* p_input_config;

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private default constructor.
  ////////////////////////////////////////////////////////////////////////////
  InputManager();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private destructor.
  ////////////////////////////////////////////////////////////////////////////
  ~InputManager();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private copy constructor.
  ////////////////////////////////////////////////////////////////////////////
  InputManager(const InputManager&);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private assignement operator
  ////////////////////////////////////////////////////////////////////////////
  InputManager& operator=(const InputManager&);
};  // class InputManager

}  // namespace sac2

#endif  //! SAC2_INPUT_MANAGER_HPP
