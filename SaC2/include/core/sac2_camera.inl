//////////////////////////////////////////////////////////////////////////////
//! \file sac2_camera.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (alpha)
//! \date
//!     2014-05-09
//! \brief
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_CAMERA_HPP_INCLUDE
#define SAC2_CAMERA_HPP_INCLUDE

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//! Camera::Camera
//////////////////////////////////////////////////////////////////////////////
inline Camera::Camera():
  m_view(sf::FloatRect(0, 0, RenderingManager::instance().get_width(),
                       RenderingManager::instance().get_height()))
{

}

//////////////////////////////////////////////////////////////////////////////
//! Camera::Camera
//////////////////////////////////////////////////////////////////////////////
inline Camera::Camera(point_t centre, vector_t size):
  m_view(sf::Vector2f(centre.x, centre.y), sf::Vector2f(size.x, size.y))
{

}

//////////////////////////////////////////////////////////////////////////////
//! Camera::~Camera
//////////////////////////////////////////////////////////////////////////////
inline Camera::~Camera()
{

}

//////////////////////////////////////////////////////////////////////////////
//! Camera::get_position
//////////////////////////////////////////////////////////////////////////////
inline point_t Camera::get_position() const
{
  return m_view.getCenter();
}

//////////////////////////////////////////////////////////////////////////////
//! Camera::get_size
//////////////////////////////////////////////////////////////////////////////
inline vector_t Camera::get_size() const
{
  return m_view.getSize();
}

//////////////////////////////////////////////////////////////////////////////
//! Camera::get_orientation
//////////////////////////////////////////////////////////////////////////////
inline float Camera::get_orientation() const
{
  return m_view.getRotation();
}

//////////////////////////////////////////////////////////////////////////////
//! Camera::set_position
//////////////////////////////////////////////////////////////////////////////
inline void Camera::set_position(point_t centre)
{
  m_view.setCenter(centre.x, centre.y);
  RenderingManager::instance().set_camera(*this);
}

//////////////////////////////////////////////////////////////////////////////
//! Camera::set_size
//////////////////////////////////////////////////////////////////////////////
inline void Camera::set_size(vector_t size)
{
  m_view.setSize(size.x, size.y);
  RenderingManager::instance().set_camera(*this);
}

//////////////////////////////////////////////////////////////////////////////
//! Camera::set_orientation
//////////////////////////////////////////////////////////////////////////////
inline void Camera::set_orientation(float angdeg)
{
  m_view.setRotation(angdeg);
  RenderingManager::instance().set_camera(*this);
}

//////////////////////////////////////////////////////////////////////////////
//! Camera::move
//////////////////////////////////////////////////////////////////////////////
inline void Camera::move(vector_t offset)
{
  m_view.move(offset.x, offset.y);
  RenderingManager::instance().set_camera(*this);
}

//////////////////////////////////////////////////////////////////////////////
//! Camera::zoom
//////////////////////////////////////////////////////////////////////////////
inline void Camera::zoom(float factor)
{
  m_view.zoom(factor);
  RenderingManager::instance().set_camera(*this);
}

//////////////////////////////////////////////////////////////////////////////
//! Camera::rotate
//////////////////////////////////////////////////////////////////////////////
inline void Camera::rotate(float angdeg)
{
  m_view.rotate(angdeg);
  RenderingManager::instance().set_camera(*this);
}

} // namespace sac2

#endif // SAC2_CAMERA_HPP_INCLUDE

