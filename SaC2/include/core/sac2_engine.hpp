//////////////////////////////////////////////////////////////////////////////
//! \file
//!     sac2_engine.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     1.0
//! \date
//!     2013-04-08
//! \brief
//!     Provides Engine class
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_ENGINE_HPP
#define SAC2_ENGINE_HPP

#include <SFML/System.hpp>

#include <sac2_type.hpp>

#ifdef SAC2_LOGGER_ENABLED
#include <sac2_logger.hpp>
#endif

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//! \class
//!     Engine
//! \brief
//!     Base Engine
//! \warning
//!     \b LOG_ENABLED should be defined only for \a Debug or
//!     \a Test \a Purposes
//////////////////////////////////////////////////////////////////////////////
class Engine
{
public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Default constructor
  //! \param title
  //!     Title of the window.
  ////////////////////////////////////////////////////////////////////////////
  Engine();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Default destructor
  ////////////////////////////////////////////////////////////////////////////
  ~Engine();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Get the current state of the engine.
  //! \return
  //!     Current state of the engine.
  //! \see
  //!     engine_state_t
  ////////////////////////////////////////////////////////////////////////////
  state_t get_engine_state() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Analyse command line arguments
  //! \param argc
  //!     Number of arguments.
  //! \param argv
  //!     Values of the arguments.
  ////////////////////////////////////////////////////////////////////////////
  void parse_options(int argc, char* argv[]);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Start the engine.
  //! \return
  //!     Status code:
  //!     - \b STATUS_SUCCESS
  //!     - \b STATUS_FAILED
  ////////////////////////////////////////////////////////////////////////////
  status_t run();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Stop the engine and quit.
  ////////////////////////////////////////////////////////////////////////////
  static void quit();

protected:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Main loop.
  ////////////////////////////////////////////////////////////////////////////
  void loop();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!    Clean the engine before quit.
  ////////////////////////////////////////////////////////////////////////////
  void cleanup();

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Gives elapsed time.
  ////////////////////////////////////////////////////////////////////////////
  sf::Clock          m_clock;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Current state of the engine.
  ////////////////////////////////////////////////////////////////////////////
  static state_t     m_engine_state;
};  // class Engine

}  // namespace sac2

#include <sac2_engine.inl>

#endif  //! SAC2_ENGINE_HPP
