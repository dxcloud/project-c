//////////////////////////////////////////////////////////////////////////////
//! \file
//!     sac2_logger.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     1.0
//! \date
//!     2013-05-12
//! \date
//!     2013-08-16
//! \brief
//!     Provides Logger class.
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_LOGGER_HPP
#define SAC2_LOGGER_HPP

#include <fstream>

#include <sac2_type.hpp>

namespace sac2
{

namespace cts
{

//////////////////////////////////////////////////////////////////////////////
//! Default Output Log filename.
//////////////////////////////////////////////////////////////////////////////
const string_t DEFAULT_LOG_FILE = "SaC2.log";

}

//////////////////////////////////////////////////////////////////////////////
//! \class Logger
//! \brief
//!     Allows to write messages into a log file.
//! \details
//!     The default output is \b std::cout whether log type methods (e.g
//!     \b Logger::log_debug, \b Logger::log_config, etc.) are used without
//!     initialization.
//! \note
//!     This class is implemented with a singleton pattern.
//////////////////////////////////////////////////////////////////////////////
class Logger
{
public:
  ////////////////////////////////////////////////////////////////////////////
  //! \enum log_level_t
  //! \brief
  //!     A set of logging levels that are used to signal logging output.
  //! \details
  //!     The logging level indicates the severity of the messages.
  //!
  //!     Typically, use \b ERROR to report a serious error and \b DEBUG
  //!     to display a simple debug trace.
  //!
  //!     The levels in ascending order are:
  //!     - DEBUG
  //!     - CONFIG
  //!     - INFO
  //!     - WARNING
  //!     - ERROR
  ////////////////////////////////////////////////////////////////////////////
  enum log_level_t {
    DEBUG   = 0,  //!< Debugging message
    CONFIG  = 1,  //!< Configuration message, e.g. CPU type
    INFO    = 2,  //!< Informational message
    WARNING = 3,  //!< Potential problem
    ERROR   = 4   //!< Serious error message
  };

public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Initialize Logger, open file stream to start logging.
  //! \param[in] filename
  //!     Output Log filename, whether this parameter is omitted,
  //!     \b DEFAULT_LOG_FILE is used instead.
  //! \details
  //!     Whether the output is \b std::cout, this method should NOT be
  //!     called, otherwise, call also \b destroy when all logging messages
  //!     are done.
  //! \see Logger::destroy
  ////////////////////////////////////////////////////////////////////////////
  static void create(const string_t& filename=cts::DEFAULT_LOG_FILE);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Close file stream.
  //! \details
  //!     Always call this method when a file stream is opened.
  //! \see Logger::create
  ////////////////////////////////////////////////////////////////////////////
  static void destroy();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Define the minimum logging level.
  //! \details
  //!     A message with a lower severity than the parameter will NOT
  //!     be displayed.
  //! \param[in] level
  //!     Logging level.
  //! \arg DEBUG
  //! \arg CONFIG
  //! \arg INFO
  //! \arg WARNING
  //! \arg ERROR
  //! \see Logger::log_level_t
  ////////////////////////////////////////////////////////////////////////////
  static void set_log_level(log_level_t level);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Log a message.
  //! \param[in] level
  //!     Logging level.
  //! \param[in] message
  //!     The string message.
  //! \see Logger::log_level_t
  ////////////////////////////////////////////////////////////////////////////
  static void log(log_level_t level, const string_t& message);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Log a \b DEBUG type message.
  //! \param[in] message
  //!     The string message.
  ////////////////////////////////////////////////////////////////////////////
  static void log_debug(const string_t& message);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Log a \b CONFIG type message.
  //! \param[in] message
  //!     The string message.
  ////////////////////////////////////////////////////////////////////////////
  static void log_config(const string_t& message);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Log a \b INFO type message.
  //! \param[in] message
  //!     The string message.
  ////////////////////////////////////////////////////////////////////////////
  static void log_info(const string_t& message);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Log a \b WARNING type message.
  //! \param[in] message
  //!     The string message.
  ////////////////////////////////////////////////////////////////////////////
  static void log_warning(const string_t& message);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Log a \b ERROR type message.
  //! \param[in] message
  //!     The string message.
  ////////////////////////////////////////////////////////////////////////////
  static void log_error(const string_t& message);

private:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private constructor.
  ////////////////////////////////////////////////////////////////////////////
  Logger();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private destructor.
  ////////////////////////////////////////////////////////////////////////////
  ~Logger();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private copy constructor.
  ////////////////////////////////////////////////////////////////////////////
  Logger(const Logger&);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Private assignment operator.
  ////////////////////////////////////////////////////////////////////////////
  Logger& operator=(const Logger&);

private:
  ////////////////////////////////////////////////////////////////////////////
  //! Indicates whether a file stream is opened.
  ////////////////////////////////////////////////////////////////////////////
  bool                   m_active;

  ////////////////////////////////////////////////////////////////////////////
  //! Minimum logging level message to be displayed.
  ////////////////////////////////////////////////////////////////////////////
  log_level_t            m_log_level;

  ////////////////////////////////////////////////////////////////////////////
  //! Output file stream.
  ////////////////////////////////////////////////////////////////////////////
  std::ofstream          m_stream;

  ////////////////////////////////////////////////////////////////////////////
  //! Unique instance of Logger.
  ////////////////////////////////////////////////////////////////////////////
  static Logger          m_logger;

  ////////////////////////////////////////////////////////////////////////////
  //! Describing text of each logging level.
  ////////////////////////////////////////////////////////////////////////////
  static const string_t  m_level_msg[];
};  //class Logger

}  // namespace sac2

#endif //! SAC2_LOGGER_HPP
