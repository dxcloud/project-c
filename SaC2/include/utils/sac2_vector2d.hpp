//////////////////////////////////////////////////////////////////////////////
//! \file
//!     sac2_vector2d.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (develpment version)
//! \date
//!     2013-07-01
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_VECTOR_2D_HPP
#define SAC2_VECTOR_2D_HPP

#include <iostream>

#include <SFML/System/Vector2.hpp>

#include <sac2_math.hpp>
#include <sac2_math_physics_type.hpp>

namespace sac2
{
//////////////////////////////////////////////////////////////////////////////
//! \class
//!     Vector2D
//! \brief
//!     2D vector.
//! \details
//!     Compatible with SFML \b sf::Vector2f
//////////////////////////////////////////////////////////////////////////////
class Vector2D
{
public:
  //! Null vector
  static const Vector2D zeros;
  //! Vector filled with 1
  static const Vector2D ones;
  //! Vector filled with -1
  static const Vector2D n_ones;
  //! Unit x vector
  static const Vector2D unit_x;
  //! Unit y vector
  static const Vector2D unit_y;
  //! Negate unit x vector
  static const Vector2D n_unit_x;
  //! Negate unit y vector
  static const Vector2D n_unit_y;

public:
  //! X coordinate
  float x;
  //! Y coordinate
  float y;

public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Default constructor
  ////////////////////////////////////////////////////////////////////////////
  Vector2D();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Override constructor
  //! \param[in] v_x
  //! \param[in] v_y
  ////////////////////////////////////////////////////////////////////////////
  Vector2D(float v_x, float v_y);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Override constructor
  //! \param[in] vector
  ////////////////////////////////////////////////////////////////////////////
  Vector2D(const sf::Vector2f& vector);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Copy constructor
  ////////////////////////////////////////////////////////////////////////////
  Vector2D(const Vector2D& vector);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Default destructor
  ////////////////////////////////////////////////////////////////////////////
  ~Vector2D();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D& operator=(const Vector2D& vector);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  bool operator==(const Vector2D& vector) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  bool operator!=(const Vector2D& vector) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D operator-() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D operator+(const Vector2D& vector) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D operator-(const Vector2D& vector) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D operator*(float scalar) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D operator/(float scalar) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D operator~() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  const Vector2D& operator()(float v_x, float v_y);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D& operator+=(const Vector2D& vector);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D& operator-=(const Vector2D& vector);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D& operator*=(float scalar);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D& operator/=(float scalar);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  bool is_collinear(const Vector2D& vector) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  bool is_perpendicular(const Vector2D& vector) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  float dot(const Vector2D& vector) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  float cross(const Vector2D& vector) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  float norm() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  float norm_2() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  float angle() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  float angle(const Vector2D& vector) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D orthogonal() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D projected(const Vector2D& vector) const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  ////////////////////////////////////////////////////////////////////////////
  Vector2D normalized() const;
};

//////////////////////////////////////////////////////////////////////////////
//! \brief
//////////////////////////////////////////////////////////////////////////////
std::ostream& operator<<(std::ostream& out, const Vector2D& vector);

//////////////////////////////////////////////////////////////////////////////
//! \brief
//////////////////////////////////////////////////////////////////////////////
Vector2D operator*(float scalar, const Vector2D& vector);

typedef Vector2D vector_t;
typedef Vector2D point_t;

}

#include <sac2_vector2d.inl>

#endif  //! SAC2_VECTOR_2D_HPP
