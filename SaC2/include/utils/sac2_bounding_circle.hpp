//////////////////////////////////////////////////////////////////////////////
//! \file
//!     sac2_bounding_circle.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (develpment version)
//! \date
//!     2013-07-03
//! \brief
//!     Provides Bounding Circle.
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_BOUNDING_CIRCLE_HPP
#define SAC2_BOUNDING_CIRCLE_HPP

#include <sac2_type.hpp>

namespace sac2
{

class BoundingCircle
{
public:
  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Default constructor.
  //! \details
  //!     Construct an empty bounding circle.
  ////////////////////////////////////////////////////////////////////////////
  BoundingCircle();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Override constructor.
  //! \param[in] center
  //!     The center of the bounding circle.
  //! \param[in] radius
  //!     The radius of the bounding circle.
  ////////////////////////////////////////////////////////////////////////////
  BoundingCircle(const point_t& center, float radius);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Override constructor.
  //! \param[in] center_x
  //!     The x coordinate of the center of the bounding circle.
  //! \param[in] center_y
  //!     The y coordinate of the center of the bounding circle.
  //! \param[in] radius
  //!     The radius of the bounding circle.
  ////////////////////////////////////////////////////////////////////////////
  BoundingCircle(float center_x, float center_y, float radius);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Copy constructor.
  ////////////////////////////////////////////////////////////////////////////
  BoundingCircle(const BoundingCircle& circle);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Default destructor.
  ////////////////////////////////////////////////////////////////////////////
  ~BoundingCircle();

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Assignment operator.
  ////////////////////////////////////////////////////////////////////////////
  BoundingCircle& operator=(const BoundingCircle& Circle);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Operator ().
  //! \param[in] center
  //!     The center of the bounding circle.
  //! \param[in] radius
  //!     The radius of the bounding circle.
  ////////////////////////////////////////////////////////////////////////////
  void operator()(const point_t& center, float radius);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Operator ().
  //! \param[in] center_x
  //!     The x coordinate of the center of the bounding circle.
  //! \param[in] center_y
  //!     The y coordinate of the center of the bounding circle.
  //! \param[in] radius
  //!     The radius of the bounding circle.
  ////////////////////////////////////////////////////////////////////////////
  void operator()(float center_x, float center_y, float radius);

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Get the center of the bounding circle.
  //! \return
  //!     Return the coordinates of the center point of the bounding circle.
  ////////////////////////////////////////////////////////////////////////////
  point_t get_center() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Get the center of the bounding circle.
  //! \return
  //!     Return the radius of the bounding circle.
  ////////////////////////////////////////////////////////////////////////////
  float get_radius() const;

  ////////////////////////////////////////////////////////////////////////////
  //! \brief
  //!     Test whether this bounding circle is intersecting a specified one.
  //! \param[in] box
  //!     The bounding box to test with.
  //! \return
  //!     Return \b true whether two the bounding circle and the specified one
  //!     are intersecting, \b false otherwise.
  ////////////////////////////////////////////////////////////////////////////
  bool intersect(const BoundingCircle& circle) const;

private:
  //! The center of the circle.
  point_t m_center;
  //! The radius of the circle.
  float m_radius;
};

}

#include <sac2_bounding_circle.inl>

#endif  //! SAC2_BOUNDING_BOX_HPP
