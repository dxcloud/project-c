//////////////////////////////////////////////////////////////////////////////
//! \file
//!     sac2_bounding_box.inl
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (develpment version)
//! \date
//!     2013-07-03
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_BOUNDING_BOX_HPP_INCLUDE
#define SAC2_BOUNDING_BOX_HPP_INCLUDE

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingBox::BoundingBox():
  m_min(0.0F, 0.0F),
  m_max(0.0F, 0.0F)
{

}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingBox::BoundingBox(const point_t& min, const point_t& max):
  m_min(min),
  m_max(max)
{

}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingBox::BoundingBox(float min_x,
                                float min_y,
                                float max_x,
                                float max_y):
  m_min(min_x, min_y),
  m_max(max_x, max_y)
{

}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingBox::BoundingBox(const BoundingBox& box):
  m_min(box.m_min),
  m_max(box.m_max)
{

}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingBox::~BoundingBox()
{

}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingBox& BoundingBox::operator=(const BoundingBox& box)
{
  this->m_min = box.m_min;
  this->m_max = box.m_max;
  return (*this);
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline void BoundingBox::operator()(const point_t& min, const point_t& max)
{
  m_min = min;
  m_max = max;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline void BoundingBox::operator()(float min_x,
                                    float min_y,
                                    float max_x,
                                    float max_y)
{
  m_min.x = min_x;
  m_min.y = min_y;
  m_max.x = max_x;
  m_max.y = max_y;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline point_t BoundingBox::get_center() const
{
  return ((m_min + m_max) * 0.5F);
}

}  // namespace sac2

#endif  //! SAC2_BOUNDING_BOX_HPP_INCLUDE
