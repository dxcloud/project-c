//////////////////////////////////////////////////////////////////////////////
//! \file
//!     sac2_bounding_circle.inl
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (develpment version)
//! \date
//!     2013-07-03
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_BOUNDING_CIRCLE_HPP_INCLUDE
#define SAC2_BOUNDING_CIRCLE_HPP_INCLUDE

namespace sac2
{

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingCircle::BoundingCircle():
  m_center(0.0F, 0.0F),
  m_radius(0.0F)
{

}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingCircle::BoundingCircle(const point_t& center, float radius):
  m_center(center),
  m_radius(radius)
{

}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingCircle::BoundingCircle(float center_x,
                                float center_y,
                                float radius):
  m_center(center_x, center_y),
  m_radius(radius)
{

}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingCircle::BoundingCircle(const BoundingCircle& circle):
  m_center(circle.m_center),
  m_radius(circle.m_radius)
{

}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingCircle::~BoundingCircle()
{

}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline BoundingCircle& BoundingCircle::operator=(const BoundingCircle& circle)
{
  this->m_center = circle.m_center;
  this->m_radius = circle.m_radius;
  return (*this);
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline void BoundingCircle::operator()(const point_t& center, float radius)
{
  m_center = center;
  m_radius = radius;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline void BoundingCircle::operator()(float center_x,
                                       float center_y,
                                       float radius)
{
  m_center.x = center_x;
  m_center.y = center_y;
  m_radius = radius;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline point_t BoundingCircle::get_center() const
{
  return m_center;
}

inline float BoundingCircle::get_radius() const
{
  return m_radius;
}

inline float BoundingCircle::area() const
{
  return (cts::PI * m_radius * m_radius);
}

}  // namespace sac2

#endif  //! SAC2_BOUNDING_CIRCLE_HPP_INCLUDE
