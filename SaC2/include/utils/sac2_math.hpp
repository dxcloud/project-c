//////////////////////////////////////////////////////////////////////////////
//! \file
//!     sac2_math.hpp
//! \author
//!     Chengwu HUANG
//! \version
//!     0.1 (develpment version)
//! \date
//!     2013-07-01
//! \brief
//!     Math utilities.
//////////////////////////////////////////////////////////////////////////////

#ifndef SAC2_MATH_HPP
#define SAC2_MATH_HPP

#include <cmath>
#include <limits>

namespace sac2
{

namespace cts
{

//////////////////////////////////////////////////////////////////////////////
//! Constant 0.
//////////////////////////////////////////////////////////////////////////////
const float ZERO = 0.0F;

//////////////////////////////////////////////////////////////////////////////
//! Constant pi = 3.14159
//////////////////////////////////////////////////////////////////////////////
const float PI = 3.141592654F;

//////////////////////////////////////////////////////////////////////////////
//! Constant 2 * pi
//////////////////////////////////////////////////////////////////////////////
const float TWO_PI = 6.283185307F;

//////////////////////////////////////////////////////////////////////////////
//! Constant pi / 2
//////////////////////////////////////////////////////////////////////////////
const float HALF_PI = 1.570796327F;

//////////////////////////////////////////////////////////////////////////////
//! Constant pi / 4
//////////////////////////////////////////////////////////////////////////////
const float QUARTER_PI = 0.785398163F;

//////////////////////////////////////////////////////////////////////////////
//! Constant Euler e = 2.71828
//////////////////////////////////////////////////////////////////////////////
const float E = 2.718281828F;

//////////////////////////////////////////////////////////////////////////////
//! Constant logarithm base 10 of 2
//////////////////////////////////////////////////////////////////////////////
const float LOG10_2 = 0.301029996F;

//////////////////////////////////////////////////////////////////////////////
//! Constant square root of 2
//////////////////////////////////////////////////////////////////////////////
const float SQRT_2 = 1.414213562F;

//////////////////////////////////////////////////////////////////////////////
//! Constant natural logarithm of 2
//////////////////////////////////////////////////////////////////////////////
const float LN_2 = 0.693147181F;

//////////////////////////////////////////////////////////////////////////////
//! Precision of floating point
//////////////////////////////////////////////////////////////////////////////
const float EPSILON = std::numeric_limits<float>::epsilon();

}

class Vector2D;

//////////////////////////////////////////////////////////////////////////////
//! \brief
//!     Convert degrees in radians.
//! \param[in] angdeg
//!     Angle in degrees to convert.
//! \return
//!     Angle in radians.
//////////////////////////////////////////////////////////////////////////////
float radians(float angdeg);

//////////////////////////////////////////////////////////////////////////////
//! \brief
//!     Convert radians in degrees.
//! \param[in] angdeg
//!     Angle in radians to convert.
//! \return
//!     Angle in degrees.
//////////////////////////////////////////////////////////////////////////////
float degrees(float angrad);

//////////////////////////////////////////////////////////////////////////////
//! \brief
//!     Compute the distance between 2 vectors.
//! \param[in] vec_1
//!     Vector
//! \param[in] vec_2
//!     Vector
//! \return
//!     Distance
//////////////////////////////////////////////////////////////////////////////
float distance(const Vector2D& vec_1, const Vector2D& vec_2);

//////////////////////////////////////////////////////////////////////////////
//! \brief
//!     Compute the squared distance between 2 vectors.
//! \param[in] vec_1
//!     Vector
//! \param[in] vec_2
//!     Vector
//! \return
//!     Distance
//////////////////////////////////////////////////////////////////////////////
float distance_2(const Vector2D& vec_1, const Vector2D& vec_2);

}

#endif  //! SAC2_MATH_HPP
